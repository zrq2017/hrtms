<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <!-- isELIgnored的值取决于web应用部署描述符的版本。使用Servlet2.4的描述符的JSP页面默认是解析EL表达式，即表达式有效。
  这默认提供了大部分应用想要的情况。
  而使用Servlet2.3或者更早的描述符的JSP页面默认是忽略EL表达式的，即不解析EL表达式，这样就提供了向后兼容性。-->
  <display-name>Archetype Created Web Application</display-name>
  <!--业务层和持久层的Spring配置文件，这些文件被父Spring容器所使用 -->


  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:Spring-mybaits.xml</param-value>
  </context-param>
  <!--通过contextConfigLocation参数指定的Spring配置文件启动“业务层”的Spring容器 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!-- 配置名为viewspace的DispatcherServlet，
  它默认自动加载/WEB-INF/viewspace-servlet.xml的Spring配置文件，启动web层Spring容器
  Spring容器之间可以设为父子关系，实现良好的解耦，在这里web层容器作为业务层的子容器
  ，即web层可以引用业务层的bean，而业务层却不可以访问web层的bean
  DispatcherServlet遵循“契约优于配置”的原则，在大多数请况下，无需进行额外的配置。可通过<servlet>de
  <int-param>指定常用配置参数
  -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <servlet>
    <servlet-name>viewspace</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

  
  <servlet-mapping>
    <servlet-name>viewspace</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

</web-app>
